package com.scrappy.sites;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;

import com.anupams.protogen.Scrape.Element;
import com.anupams.protogen.Scrape.Element.By;
import com.anupams.protogen.Scrape.Relative;
import com.anupams.protogen.Scrape.Step;

import java.util.Arrays;
import java.util.List;

/**
 * TODO: Insert description here. (generated by anupams)
 */
public abstract class BaseConfig {

  /**
   * Adds {@link Relative} elements to an existing element.
   *
   * @param existingElement the element to which relative elements are to be added
   * @param relatives an array of relatives to be added
   * @return the updated element
   */
  protected Element addRelativeElements(Element existingElement, Relative... relatives) {
    if (null != relatives) {
      return existingElement.toBuilder().addAllRelativeElement(Arrays.asList(relatives)).build();
    }
    return existingElement;
  }

  protected Element buildElement(String id, By searchElementBy, String value,
      List<Relative> relatives) {
    Preconditions.checkArgument(!Strings.isNullOrEmpty(id), "Id can not be null");
    Preconditions.checkArgument(!Strings.isNullOrEmpty(value), "value can not be null");

    Element.Builder element = Element.newBuilder();
    element.setId(id).setSearchBy(searchElementBy).setValue(value);
    if (null != relatives && relatives.size() > 0) {
      element.addAllRelativeElement(relatives);
    }
    return element.build();
  }

  /**
   * Generates an {@link Element} to be scraped.
   *
   * @param id the unique identifier of the element in configuration
   * @param searchElementBy specifies they way dom would be queried, i.e through CSS,ID,XPATH etc
   * @param value the value to be looked up in the dom
   * @param relatives an array of elements to be searched as child of the element being build
   * @return the generated element
   */
  protected Element buildElement(String id, By searchElementBy, String value,
      Relative... relatives) {
    List<Relative> relations = Lists.newArrayList();
    if (null != relatives) {
      relations = Arrays.asList(relatives);
    }
    return buildElement(id, searchElementBy, value, relations);
  }

  /**
   * Constructs a list of steps needed to scrape the site under consideration.
   *
   * @return list of steps to be scraped
   */
  public abstract List<Step> constructConfig();
}
